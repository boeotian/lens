<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentTypeMismatch" xml:space="preserve">
    <value>Невозможно использовать выражения типа '{0}' в качестве значения параметра типа '{1}'!</value>
  </data>
  <data name="ArrayElementTypeMismatch" xml:space="preserve">
    <value>Невозможно добавить объект типа '{0}' в массив типа '{1}'!</value>
  </data>
  <data name="ArrayEmpty" xml:space="preserve">
    <value>Инициализатор массива должен содержать хотя бы один элемент! Для создания пустых массивов воспользуйтесь явным конструктором.</value>
  </data>
  <data name="ArrayTypeUnknown" xml:space="preserve">
    <value>Тип массива не может быть выведен! Воспользуйтесь операцией приведения типов.</value>
  </data>
  <data name="CallableTooManyArguments" xml:space="preserve">
    <value>Невозможно создать делегат из метода, принимающего более 16 аргументов.</value>
  </data>
  <data name="CastDelegateArgTypesMismatch" xml:space="preserve">
    <value>У делегатов '{0}' и '{1}' не совпадают аргументы!</value>
  </data>
  <data name="CastDelegateReturnTypesMismatch" xml:space="preserve">
    <value>У делегатов '{0}' и '{1}' не совпадают возвращаемые значения!</value>
  </data>
  <data name="CastNullValueType" xml:space="preserve">
    <value>Невозможно привести выражение null к типу '{0}', поскольку он передается по значению!</value>
  </data>
  <data name="CastTypesMismatch" xml:space="preserve">
    <value>Невозможно привести объект типа '{0}' к типу '{1}'!</value>
  </data>
  <data name="CatchClauseUnreachable" xml:space="preserve">
    <value>Это выражение catch недостижимо, поскольку исключения типа '{0}' будут перехвачены выше как наследники типа '{1}'!</value>
  </data>
  <data name="CatchTypeDuplicate" xml:space="preserve">
    <value>Тип '{0}' уже был использован в выражении catch текущего блока try!</value>
  </data>
  <data name="CatchTypeNotException" xml:space="preserve">
    <value>Тип '{0}' не может быть использован в выражении catch, поскольку он не наследуется от System.Exception!</value>
  </data>
  <data name="ClosureImplicit" xml:space="preserve">
    <value>Невозможно использовать неявную переменную в замыкании!</value>
  </data>
  <data name="ClosureRef" xml:space="preserve">
    <value>Невозможно использовать аргумент, передаваемый по ссылке, в замыкании!</value>
  </data>
  <data name="CodeBlockEmpty" xml:space="preserve">
    <value>Блок кода должен содержать хотя бы одно выражение!</value>
  </data>
  <data name="CodeBlockLastVar" xml:space="preserve">
    <value>Объявление переменной или константы не может быть последним выражением в блоке!</value>
  </data>
  <data name="ConditionInconsistentTyping" xml:space="preserve">
    <value>Невозможно определить общий тип для ветвей условия! Типы выражений -  '{0}' и '{1}'.</value>
  </data>
  <data name="ConditionTypeMismatch" xml:space="preserve">
    <value>Выражение типа '{0}' нельзя использовать в качестве условия, поскольку оно не приводится к типу boolean!</value>
  </data>
  <data name="ConstantByRef" xml:space="preserve">
    <value>Константы нельзя передавать в функции по ссылке!</value>
  </data>
  <data name="ConstantDivisionByZero" xml:space="preserve">
    <value>Деление на ноль!</value>
  </data>
  <data name="ConstantOverflow" xml:space="preserve">
    <value>Результат выражения-константы превышает допустимое максимальное значение типа!</value>
  </data>
  <data name="ConstructorStatic" xml:space="preserve">
    <value>Конструктор не может быть статическим!</value>
  </data>
  <data name="ContextNotFound" xml:space="preserve">
    <value>Контекст #{0} не существует!</value>
  </data>
  <data name="ContextUnregistered" xml:space="preserve">
    <value>Контекст #{0} был освобожден!</value>
  </data>
  <data name="DelegateArgumentsCountMismatch" xml:space="preserve">
    <value>Вызов делегата типа '{0}' требует {1} аргументов, а передано {2}!</value>
  </data>
  <data name="DelegatesNotCombinable" xml:space="preserve">
    <value>Невозможно применить композицию к делегатам типов '{0}' и '{1}', поскольку их подписи несовместимы!</value>
  </data>
  <data name="DictionaryEmpty" xml:space="preserve">
    <value>Инициализатор словаря должен содержать хотя бы один элемент! Для создания пустых словарей воспользуйтесь явным конструктором.</value>
  </data>
  <data name="DictionaryKeyTypeMismatch" xml:space="preserve">
    <value>Невозможно добавить ключ типа '{0}' в Dictionary&lt;{1}, {2}&gt;!</value>
  </data>
  <data name="DictionaryTypeUnknown" xml:space="preserve">
    <value>Тип словаря не может быть выведен! Воспользуйтесь операцией приведения типов.</value>
  </data>
  <data name="DictionaryValueTypeMismatch" xml:space="preserve">
    <value>Невозможно добавить значение типа '{0}' в Dictionary&lt;{1}, {2}&gt;!</value>
  </data>
  <data name="DynamicMemberFromStaticContext" xml:space="preserve">
    <value>Невозможно получить доступ к '{0}' из статического контекста!</value>
  </data>
  <data name="ExpressionNull" xml:space="preserve">
    <value>Тип выражения не может быть выведен! Воспользуйтесь операцией приведения типов.</value>
  </data>
  <data name="ExpressionVoid" xml:space="preserve">
    <value>Требуется выражение, возвращающее значение!</value>
  </data>
  <data name="ForeachRangeNotInteger" xml:space="preserve">
    <value>Тип '{0}' невозможно использовать в качестве границы диапазона, поскольку он не является целочисленным!</value>
  </data>
  <data name="ForeachRangeTypeMismatch" xml:space="preserve">
    <value>Невозможно получить диапазон из выражений типов '{0}' и '{1}'!</value>
  </data>
  <data name="FunctionInvocationAmbiguous" xml:space="preserve">
    <value>Найдено несколько подходящих переопределений функции '{0}'! Воспользуйтесь операцией приведения типов для указания конкретного переопределения!</value>
  </data>
  <data name="FunctionNotFound" xml:space="preserve">
    <value>Не найдено ни одного переопределения функции '{0}', принимающей переданные аргументы!</value>
  </data>
  <data name="FunctionRedefinition" xml:space="preserve">
    <value>Функция '{0}' с таким списком аргументов уже была объявлена!</value>
  </data>
  <data name="GenericArgCountMismatch" xml:space="preserve">
    <value>Количество обобщенных аргументов не совпадает!</value>
  </data>
  <data name="GenericArgMismatch" xml:space="preserve">
    <value>Для обобщенного аргумента '{0}' переданы несовпадающие значения: '{1}' и '{2}'!</value>
  </data>
  <data name="GenericArgsToNonGenericMethod" xml:space="preserve">
    <value>Метод '{0}' не принимает обобщенных аргументов!</value>
  </data>
  <data name="GenericArgumentNotResolved" xml:space="preserve">
    <value>Значение обобщенного аргумента '{0}' не может быть вычислено!</value>
  </data>
  <data name="GenericClassConstraintViolated" xml:space="preserve">
    <value>Тип '{0}' не может быть использован как значение обобщенного аргумента '{1}' для типа '{2}', поскольку не является ссылочным типом!</value>
  </data>
  <data name="GenericConstructorConstraintViolated" xml:space="preserve">
    <value>Тип '{0}' не может быть использован как значение обобщенного аргумента '{1}' для типа '{2}', поскольку не имеет конструктор по умолчанию!</value>
  </data>
  <data name="GenericHintMismatch" xml:space="preserve">
    <value>Для обобщенного аргумента '{0}' был явно указан тип '{1}', но использование подразумевает тип '{2}'!</value>
  </data>
  <data name="GenericImplementationWrongType" xml:space="preserve">
    <value>Невозможно вычислить значение обобщенного аргумента '{0}', используя тип '{1}'!</value>
  </data>
  <data name="GenericInheritanceConstraintViolated" xml:space="preserve">
    <value>Тип '{0}' не может быть использован как значение обобщенного аргумента '{1}' для типа '{2}', поскольку не реализует класс или интерфейс '{3}'!</value>
  </data>
  <data name="GenericInterfaceMultipleImplementations" xml:space="preserve">
    <value>Невозможно определить обобщенные аргументы интерфейса '{0}': тип '{1}' реализует несколько его переопределений!</value>
  </data>
  <data name="GenericInterfaceNotImplemented" xml:space="preserve">
    <value>Тип '{0}' не реализует интерфейс '{1}'!</value>
  </data>
  <data name="GenericParameterNotFound" xml:space="preserve">
    <value>Обобщенный аргумент '{0}' не был найден!</value>
  </data>
  <data name="GenericStructConstraintViolated" xml:space="preserve">
    <value>Тип '{0}' не может быть использован как значение обобщенного аргумента '{1}' для типа '{2}', поскольку не является передаваемым по значению!</value>
  </data>
  <data name="GlobalPropertyNoGetter" xml:space="preserve">
    <value>Невозможно получить значение глобального свойства '{0}'!</value>
  </data>
  <data name="GlobalPropertyNoSetter" xml:space="preserve">
    <value>Невозможно задать значение глобального свойства '{0}'!</value>
  </data>
  <data name="GlobalPropertyTypeMismatch" xml:space="preserve">
    <value>Невозможно присвоить глобальному свойству '{0}' значение типа '{1}'! Возможно, требуется явное приведение типа.</value>
  </data>
  <data name="IdentifierIsConstant" xml:space="preserve">
    <value>'{0}' является константой и изменение ее значения запрещено!</value>
  </data>
  <data name="IdentifierNotFound" xml:space="preserve">
    <value>Переменная или функция без параметров с названием '{0}' не найдена!</value>
  </data>
  <data name="IdentifierTypeMismatch" xml:space="preserve">
    <value>Невозможно присвоить значение типа '{0}' переменной типа '{1}'! Возможно. требуется явное приведение типа.</value>
  </data>
  <data name="ImplicitCastImpossible" xml:space="preserve">
    <value>Невозможно неявно привести выражение типа '{0}' к типу '{1}'!</value>
  </data>
  <data name="ImportIntoSaveableAssembly" xml:space="preserve">
    <value>Сохраняемые сборки не поддерживают импорт!</value>
  </data>
  <data name="ImportUnsupportedMethod" xml:space="preserve">
    <value>Только публичные, статические и не содержащие обобщенных аргументов методы могут быть импортированы!</value>
  </data>
  <data name="IndexAmbigious" xml:space="preserve">
    <value>Индексатор не может быть однозначно определен! Подходят как минимум два переопределения:{3}{0}[{1}]{3}{0}[{2}]</value>
  </data>
  <data name="IndexerValuetypeRef" xml:space="preserve">
    <value>Нельзя использовать индексатор типа '{0}' в качестве значения для ref-параметра, поскольку возвращаемый им тип '{1}' передается по значению!</value>
  </data>
  <data name="IndexGetterNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит индексатора на чтение, который бы принимал индекс типа '{1}'!</value>
  </data>
  <data name="IndexSetterNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит индексатора на запись, который бы принимал индекс типа '{1}'!</value>
  </data>
  <data name="LambdaReturnTypeUnknown" xml:space="preserve">
    <value>Возвращаемый тип анонимной функции не может быть выведен! Воспользуйтесь операцией приведения типов.</value>
  </data>
  <data name="ListElementTypeMismatch" xml:space="preserve">
    <value>Невозможно добавить объект типа '{0}' в List&lt;{1}&gt;!</value>
  </data>
  <data name="ListEmpty" xml:space="preserve">
    <value>Инициализатор списка должен содержать хотя бы один элемент! Для создания пустых списков воспользуйтесь явным конструктором.</value>
  </data>
  <data name="ListTypeUnknown" xml:space="preserve">
    <value>Тип списка не может быть выведен! Воспользуйтесь операцией приведения типов.</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Позиция: {0}</value>
  </data>
  <data name="LocationSpan" xml:space="preserve">
    <value>Позиция: {0} ... {1}</value>
  </data>
  <data name="MethodRedefinition" xml:space="preserve">
    <value>Метод '{0}' типа '{1}' с таким списком аргументов уже был объявлен!</value>
  </data>
  <data name="MethodRef" xml:space="preserve">
    <value>Нельзя использовать метод в качестве значения для ref-параметра!</value>
  </data>
  <data name="OperatorBinaryTypesMismatch" xml:space="preserve">
    <value>Невозможно применить оператор '{0}' к аргументам типов '{1}' и '{2}'!</value>
  </data>
  <data name="OperatorTypesSignednessMismatch" xml:space="preserve">
    <value>Невозможно провести математическую операцию к числам разной знаковости!</value>
  </data>
  <data name="OperatorUnaryTypeMismatch" xml:space="preserve">
    <value>Невозможно применить оператор '{0}' к аргументу типа '{1}'!</value>
  </data>
  <data name="ParameterlessConstructorParens" xml:space="preserve">
    <value>Для вызова конструктора без параметров требуется указать пустые скобки!</value>
  </data>
  <data name="PropertyIdNoGetter" xml:space="preserve">
    <value>Значение свойства #{0} не может быть получено!</value>
  </data>
  <data name="PropertyIdNoSetter" xml:space="preserve">
    <value>Значение свойства #{0} не может быть задано!</value>
  </data>
  <data name="PropertyIdNotFound" xml:space="preserve">
    <value>Свойство #{0} не найдено!</value>
  </data>
  <data name="PropertyImported" xml:space="preserve">
    <value>Свойство '{0}' уже было импортировано!</value>
  </data>
  <data name="PropertyNoGetter" xml:space="preserve">
    <value>Значение свойства '{0}.{1}' не может быть получено!</value>
  </data>
  <data name="PropertyNoSetter" xml:space="preserve">
    <value>Значение свойства '{0}.{1}' не может быть задано!</value>
  </data>
  <data name="PropertyValuetypeRef" xml:space="preserve">
    <value>Нельзя использовать свойство '{0}.{1}' в качестве значения для ref-параметра, поскольку возвращаемый им тип '{2}' передается по значению!</value>
  </data>
  <data name="PureFunctionReturnUnit" xml:space="preserve">
    <value>Функция '{0}' не может быть чистой, поскольку не возвращает значения!</value>
  </data>
  <data name="PureFunctionTooManyArgs" xml:space="preserve">
    <value>Функция '{0}' не может быть чистой, поскольку содержит больше 7 аргументов!</value>
  </data>
  <data name="ReferenceArgExpected" xml:space="preserve">
    <value>Аргумент {0} требует ссылку типа '{1}'!</value>
  </data>
  <data name="ReferenceArgUnexpected" xml:space="preserve">
    <value>Нельзя использовать ссылку в качестве значения не-ссылочного параметра!</value>
  </data>
  <data name="ReservedFunctionInvocation" xml:space="preserve">
    <value>Невозможно вызвать функцию '{0}', поскольку она является зарезервированной!</value>
  </data>
  <data name="ReservedFunctionRedefinition" xml:space="preserve">
    <value>Невозможно объявить функцию с именем '{0}', поскольку она является зарезервированной!</value>
  </data>
  <data name="ReturnTypeMismatch" xml:space="preserve">
    <value>Функция типа '{0}' не может вернуть объект типа '{1}'!</value>
  </data>
  <data name="SafeModeIllegalType" xml:space="preserve">
    <value>Растройки безопасного режима не позволяют использовать тип '{0}'!</value>
  </data>
  <data name="ThrowArgumentExpected" xml:space="preserve">
    <value>Требуется выражение! Повторный выброс исключения допустим только в выражении catch.</value>
  </data>
  <data name="ThrowTypeNotException" xml:space="preserve">
    <value>Тип '{0}' не может быть использован в выражении throw, поскольку он не наследуется от System.Exception!</value>
  </data>
  <data name="TupleNoArgs" xml:space="preserve">
    <value>Кортеж должен содержать хотя бы один объект!</value>
  </data>
  <data name="TupleTooManyArgs" xml:space="preserve">
    <value>Кортеж не может содержать больше 8 объектов! Воспользуйтесь структурой или вложенным кортежом.</value>
  </data>
  <data name="TypeAbstract" xml:space="preserve">
    <value>Невозможно создать экземпляр абстрактного типа '{0}'!</value>
  </data>
  <data name="TypeArgumentsForNonMethod" xml:space="preserve">
    <value>Невозможно применить обобщенные параметры к '{0}.{1}', потому что это не метод!</value>
  </data>
  <data name="TypeConstructorAmbiguos" xml:space="preserve">
    <value>Тип '{0}' содержит несколько подходящих конструкторов! Воспользуйтесь операцией приведения типов .</value>
  </data>
  <data name="TypeConstructorNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит конструктор с подходящим списком аргументов!</value>
  </data>
  <data name="TypeDefined" xml:space="preserve">
    <value>Тип '{0}' уже объявлен!</value>
  </data>
  <data name="TypeIdentifierNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит свойства, метода или поля под названием '{1}'!</value>
  </data>
  <data name="TypeIsAmbiguous" xml:space="preserve">
    <value>Неоднозначное указание типа: тип '{0}' найден как минимум в двух пространствах имен:{5}{1} в сборке {2}{5}{3} в сборке {4}</value>
  </data>
  <data name="TypeMethodAmbiguous" xml:space="preserve">
    <value>Тип '{0}' содержит несколько подходящих переопределений метода '{1}'! Укажите типы аргументов явно.</value>
  </data>
  <data name="TypeMethodInvocationAmbiguous" xml:space="preserve">
    <value>Тип '{0}' содержит несколько подходящих переопределений метода '{1}'! Воспользуйтесь операцией приведения типов.</value>
  </data>
  <data name="TypeMethodNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит метод '{1}' с подходящим списков аргументов! Соответствующий метод-расширение также не найден.</value>
  </data>
  <data name="TypeNotCallable" xml:space="preserve">
    <value>Невозможно передать аргументы выражению типа '{0}', поскольку он не является функцией!</value>
  </data>
  <data name="TypeNotFound" xml:space="preserve">
    <value>Тип '{0}' не найден!</value>
  </data>
  <data name="TypeNotImplicitlyBoolean" xml:space="preserve">
    <value>Тип '{0}' нельзя использовать в булевом контексте!</value>
  </data>
  <data name="TypeNotIterable" xml:space="preserve">
    <value>Тип '{0}' не является перечислимым!</value>
  </data>
  <data name="TypeNotNumeric" xml:space="preserve">
    <value>Тип '{0}' не является числовым!</value>
  </data>
  <data name="TypeSettableIdentifierNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит поля или свойства '{1}'!</value>
  </data>
  <data name="TypesIncomparable" xml:space="preserve">
    <value>Невозможно сравнить объекты типов '{0}' и '{1}'!</value>
  </data>
  <data name="UnderscoreName" xml:space="preserve">
    <value>Идентификатор '_' является зарезервированным и не может быть использован в названиях переменных, аргументов или любых других объявленных пользователем сущностей!</value>
  </data>
  <data name="VariableDefined" xml:space="preserve">
    <value>Переменная '{0}' уже объявлена!</value>
  </data>
  <data name="VariableNotFound" xml:space="preserve">
    <value>Переменная '{0}' не объявлена в данной области видимости!</value>
  </data>
  <data name="VoidTypeDefault" xml:space="preserve">
    <value>Невозможно создать экземпляр типа Unit или void!</value>
  </data>
  <data name="TypeStaticMethodNotFound" xml:space="preserve">
    <value>Тип '{0}' не содержит метод '{1}' с подходящим списком аргументов!</value>
  </data>
  <data name="FieldRedefinition" xml:space="preserve">
    <value>Тип '{0}' уже содержит поле '{1}'!</value>
  </data>
</root>